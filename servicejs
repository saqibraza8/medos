// Initialize Firebase(connection string here)
var config = {
    apiKey: "AIzaSyA_vYMMwJZwo4XNWpRYL5vhdFgtq1l13_U",
    authDomain: "test-neet.firebaseapp.com",
    databaseURL: "https://test-neet.firebaseio.com",
    projectId: "test-neet",
    storageBucket: "test-neet.appspot.com",
    messagingSenderId: "689626797297"
};
firebase.initializeApp(config);

const auth = firebase.auth();
var db = firebase.database();
var userPos = {}
$(document).ready(function () {

    //ready method


})


function pushPage(page, anim) {
    if (anim) {
        document.getElementById('appNavigator').pushPage(page.id, { data: { title: page.title }, animation: anim });
    } else {
        document.getElementById('appNavigator').pushPage(page.id, { data: { title: page.title } });
    }
};

function swipeNext(id) {
    var carousel = document.getElementById('carousel');
    var activeIndex = carousel.getActiveIndex();
    carousel.setActiveIndex(activeIndex + 1);

}

function swipePrev(id) {
    var carousel = document.getElementById('carousel');
    var activeIndex = carousel.getActiveIndex();
    carousel.setActiveIndex(activeIndex - 1);
    //console.log(carousel._swiper.itemCount);

}

var LoginApp = ons.bootstrap("healthcareLoginApp", ['multipleDatePicker', 'onsen']);

LoginApp.controller("mainController", function ($scope, $http, $sce, $timeout, $element, $window, $log, $filter, $element) {



    this.username = '';
    this.password = '';
    $scope.searchText = '';
    

    $scope.serviceObj = [
        {   ServiceCatId: 1,
            ServiceCatName: "IT Return/Tax Filling",
            subCategory: [{
                ServiceSubCatId: 2,
                ServiceSubCatName: "Salaried Individual Tax Filing",
                ServiceSubCatDetails: "Tax Filing for a salaried individual for the fiscal year.",
                LastDateOfFilling: "31-07-2019",
                Fee:"700",
                
                documents:[{
                    ServiceDocId: 1,
                    ServiceDocName: "Salary Form 16"
                },
                {
                    ServiceDocId: 2,
                    ServiceDocName: "Income from House rent"
                },
                {
                    ServiceDocId: 3,
                    ServiceDocName: "Other Income , Interest from fixed deposit"
                },
                {
                    ServiceDocId: 4,
                    ServiceDocName: "Withdrawal from PF & Bank Deposits"
                }]
            },
            {
                ServiceSubCatId: 4,
                ServiceSubCatName: "Individual Tax Filing (Non Salaried)",
                ServiceSubCatDetails: "Tax Filing for an individual with income from Capital Gains or Tax Relief under Section 89",
                LastDateOfFilling: "NA",
                Fee:"780",
                documents:[{
                    ServiceDocId: 5,
                    ServiceDocName: "Salary - form 16"
                },
                {
                    ServiceDocId: 6,
                    ServiceDocName: "Withdrawal from PF & Bank Deposits"
                },
                {
                    ServiceDocId: 7,
                    ServiceDocName: "Capital Gains from sale of stocks, mutual funds & property"
                },
                {
                    ServiceDocId: 8,
                    ServiceDocName: "Donations"
                }]
            },
            {
                ServiceSubCatId: 5,
                ServiceSubCatName: "NRI Tax Returns Filing",
                ServiceSubCatDetails: "Tax Returns Filing for Non-Resident Indian (NRI) for the fiscal year",
                LastDateOfFilling: "31-07-2019",
                Fee:"800",
                documents:[
                {
                    ServiceDocId: 7,
                    ServiceDocName: "Capital Gains from sale of stocks, mutual funds & property"
                },
                {
                    ServiceDocId: 8,
                    ServiceDocName: "Donations"
                }]
            }
            ]
        },
        {   ServiceCatId: 2,
            ServiceCatName: "GST Filling / New Registration",
            subCategory: [{
                ServiceSubCatId: 6,
                ServiceSubCatName: "GST Registration",
                ServiceSubCatDetails: "Goods And Services Tax (GST) Registration for a small/ medium or large business owner.",
                Fee:"3000",
                documents:[{
                    ServiceDocId: 9,
                    ServiceDocName: "Copy of PAN of the Applicant"
                },
                {
                    ServiceDocId: 10,
                    ServiceDocName: "copy of Aadhaar card"
                },
                {
                    ServiceDocId: 11,
                    ServiceDocName: "Identity and Address proof of Promoters/Director with Photographs"
                },
                {
                    ServiceDocId: 12,
                    ServiceDocName: "Digital Signature"
                }]
               },
               {
                   ServiceSubCatId: 8,
                   ServiceSubCatName: "GST Filing - TRAN 1",
                   ServiceSubCatDetails: "GST Filing - TRAN 1",
                   Fee:"1500"
              
               }]
        }
    
    ];

    $scope.serviceSubObj = [
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
        {   ServiceCatId: 1,
            ServiceSubCatId: 2,
            ServiceCatName: "Salaried Individual Tax Filing"
        },
    
    ];
    $scope.searchItems = ['Tax Consultant', 'TDS Return Service'];
    $scope.searchItems2 = ['Income Tax Filing for Individual', 'Income Tax Filing for Business House'];
    $scope.searchItems3 = ['GST Return Filing', 'Service Tax Filing', 'VAT Filing', 'GST Registration', 'Service Tax Return Service'];
    $scope.searchItems4 = ['Income Tax Auditing'];
    
    

    $scope.historyTitle = "Your test history";

    $scope.showSearchPage = function () {
        pushPage({ 'id': 'searchPage.html', 'title': 'Search' });
    }

    $scope.type1 = true;
    $scope.type2 = true;
    $scope.type3 = true;
    $scope.type4 = true;

    $scope.searchTextChange = function () {
        
        $scope.type1 = $scope.showListHeader($scope.searchItems, event.currentTarget.value)
        $scope.type2 = $scope.showListHeader($scope.searchItems2, event.currentTarget.value)
        $scope.type3 = $scope.showListHeader($scope.searchItems3, event.currentTarget.value)
        $scope.type4 = $scope.showListHeader($scope.searchItems4, event.currentTarget.value)
    }

    $scope.showListHeader = function (obj,val) {
        
        if (val == "") {
            return true;
        }
        else {
            var arr = _.filter(obj, function (item) { return item.toUpperCase().indexOf(val.toUpperCase()) > -1 });

            if (arr.length > 0) {
                return true;
            }
            else {
                return false;
            }
        }
        

    }

    $scope.hiddenTabClick = function (tabId) {
        $("#" + tabId).trigger('click');

        if (tabId == 'accountTab' || 'menuTab') {
            $('#btn_menu').hide();
            $('#btn_home').show()
        }

        if (tabId == 'homeTab') {
            $('#btn_menu').show();
            $('#btn_home').hide()
        }
    }



    //load home page
    $scope.loadHomePage = function () {

        $(".loader").show();
        var _scope = $scope;
        var userID = localStorage.getItem("userID");
        if (userID != null) {
            //db.ref("users/" + userID).on('value', function (snapshot) {

            //    //login logic here

               
               
            //    $(".loader").hide();

            //});
            $("#notLogged").hide();
            $("#logedIn").show();
            $(".loader").hide()
        }
        else {
            $('.loader').hide();
        }



    }

    $scope.loadHomePage();

    $scope.showServiceDetails = function(serviceObj){
        $scope.serviceToolBarTitle = serviceObj.ServiceSubCatName;
        $scope.serviceDetails = serviceObj.ServiceSubCatDetails;
        $scope.fee = serviceObj.Fee;
        if(serviceObj.LastDateOfFilling){
            $scope.LastDateOfFilling = serviceObj.LastDateOfFilling;
            $scope.showLastDate = true;
        }
        else{
            $scope.showLastDate = false;
        }
            

        pushPage({ 'id': 'serviceDetails.html', 'title': 'Service Details' });
    }

    //load verification code
    $scope.verificationCode = "";

    //subscibe logic
    this.subscribe = function () {
        var code = $("#codeInput")[0].value;
        if (code.length > 0) {
            db.ref("subscriptioncodes/" + code).once('value', function (snapshot) {
                if (snapshot.val() == null) {
                    alert("Please Enter a valid Subscription Code");
                }
                else {
                    if (snapshot.val().isActive.toString() === "false") {
                        var isActive = localStorage.userID;
                        db.ref("users/" + localStorage.userID + "/" + "subscription").set({ code }).then(function () {
                            db.ref("subscriptioncodes/" + code).set({ isActive }).then(function () {
                                alert("You have successfully activated your subscription");
                            })
                        })
                    }
                    else {
                        alert("Please Enter a valid Subscription Code");
                    }
                }
            });
        }
        else {
            alert("Please Enter a valid Code");
        }

    }

    //login logic
    this.getOtp = function () {
        $('#btnotp').hide();
        $('.loader').show();

        var otp = parseInt( Math.random() * 1000000);
        localStorage.setItem("otp",otp);
        alert("Please Enter " + otp + " as your OTP.")
        setTimeout(function () {
            $('.loader').hide();
            $('#btnResend').show();
            $('#btnlogin').show();
            $('#lblotp').show();
        }, 2000)
    }

    this.login = function () {

        this.userObject = [];

        //alert("Log in disabled in demo version. You are logged in as demoUser. Please Contact administrator for more details")

        $scope.username = this.username;
        $scope.password = this.password;
        localStorage.setItem("typePw", this.password);
        localStorage.setItem("typeID", this.username);
        $(".loader").show();
        var _scope = $scope;

        var otp = localStorage.otp;

        if(otp == $scope.password){
            localStorage.setItem("userID",$scope.username);
            _scope.loadHomePage();

            $("#notLogged").hide();
            $("#logedIn").show();
            $(".loader").hide()
        }
        else{
            alert("You have entered an incorrect OTP");
            $(".loader").hide();
        }

        //db.ref('users/' + this.username).once('value', function (snapshot) {
        //    if (snapshot.val() != null) {

        //        if (snapshot.val().password == localStorage["typePw"]) {

        //            localStorage.setItem("userID", localStorage["typeID"]);

                   
        //        }
        //        else {
                   
        //        }
        //    }
        //    else {
        //        alert("Phone Number Does not Exist.");
        //        $(".loader").hide();
        //    }

        //})

        //       .then(function () {
        //    if(this.userObject!=null){
        //    $scope.userObject = this.userObject;
        //	const promise =  auth.signInWithEmailAndPassword(this.userObject.email,$scope.password);
        //                           promise.catch(function(e){
        //                               alert(e.message);
        //                               $(".loader").hide();

        //                           });

        //	}
        //	else{
        //	alert('Phone number does not exist');
        //	$(".loader").hide();
        //	}

        //})

    }

    //register logic
    this.register = function () {

        $(".loader").show();
        this.userObject = [];
        $scope.username = this.username;
        $scope.password = this.password;
        $scope.name = this.name;
        $scope.email = this.email;
        if (this.password == this.repPassword) {

            db.ref('users/' + this.username).once('value', function (snapshot) {

                this.userObject = snapshot.val();


            }).then(function () {
                if (this.userObject == null) {
                    //auth.createUserWithEmailAndPassword($scope.email,$scope.password).then(function(){
                    //const promise =  auth.signInWithEmailAndPassword($scope.email,$scope.password);
                    //promise.then(function(){
                    firebase.database().ref('users/' + $scope.username).set({
                        name: $scope.name,
                        email: $scope.email,
                        password: $scope.password,
                        subscription: { code: "INVALID" },
                        tests: "Not Yet",
                        freeTest: "Not Yet"
                    }).then(function () {
                        alert('Registered Succesfully');
                        location.reload();
                    });
                    //})

                    //});
                }
                else {
                    alert('Phone number already exists');
                    $(".loader").hide();
                }

            })
        }
        else {

            alert("Passwords dont match");
        }


    }

    //logout/ session out logic
    this.logout = function () {
        var r = confirm("Are you sure Logout?");
        if (r) {
            delete localStorage["userID"];
            delete localStorage["Validator"];

            location.reload();
        }

    }




}).config(function ($httpProvider) {
    $httpProvider.defaults.headers.post = {};
    $httpProvider.defaults.headers.post["Content-Type"] = "application/json; charset=utf-8";
})

ons.ready(function () {
    ons.platform._selectedPlatform = 'android';
    localStorage.setItem("scrollCount", "0");
    setInterval(function () {
        if (document.getElementById('carousel')) {
            var number = parseInt(Math.random() * 100);

            var actI = document.getElementById('carousel').getActiveIndex();

            if (actI < 1) {
                swipeNext();
            }
            else {
                carousel.setActiveIndex(0);
            }

            //if (number % 2 == 0) {
            //    swipeNext();
            //    var index = parseInt(localStorage.scrollCount) + 1;
            //    localStorage.setItem('scrollCount', index);
            //}
            //else {
            //    var index = parseInt(localStorage.scrollCount) + 1;
            //    localStorage.setItem('scrollCount', index);
            //    swipePrev();
            //}
            //console.log("ScollFunction", number, localStorage.scrollCount);
            
        }
        
    }, 3000);
});
